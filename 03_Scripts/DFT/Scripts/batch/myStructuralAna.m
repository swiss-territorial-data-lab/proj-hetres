% DIGITAL FORESTRY TOOLBOX - TUTORIAL 2
%
% Other m-files required: LASread.m, LASwrite.m, rasterize.m, elevationModels.m, canopyPeaks.m,
% treeWatershed.m, topoColor.m
% Subfunctions: none
% MAT-files required: none
% Compatibility: tested on Matlab R2020b, GNU Octave 6.2.0 (configured for "x86_64-w64-mingw32")
%
% See also:
%
% This code is part of the Matlab Digital Forestry Toolbox
%
% Author: Matthew Parkan, EPFL - GIS Research Laboratory
% Website: http://mparkan.github.io/Digital-Forestry-Toolbox/
% Last revision: April 4, 2021
% Acknowledgments: This work was supported by the Swiss Forestry and Wood Research Fund (WHFF, OFEV), project 2013.18
% Licence: GNU General Public Licence (GPL), see https://www.gnu.org/licenses/gpl.html for details

clc
clear
close all

OCTAVE_FLAG = (exist('OCTAVE_VERSION', 'builtin') ~= 0); % determine if system is Matlab or GNU Octave

if OCTAVE_FLAG

    pkg load statistics
    pkg load image
    more off

end


%% Step -1 - Reading the LAS file

% IMPORTANT: adjust the path to the input LAS file
pc = LASread('C:\Users\cmarmy\Desktop\test.las');

bb_xmin = min(pc.record.x)
bb_xmax = max(pc.record.x)
bb_ymin = min(pc.record.y)
bb_ymax = max(pc.record.y)
res = 0.5
it = 70

#for x
  #for y
   # ev for z
idx_layer = (pc.record.x >= bb_xmin+res*it & pc.record.x <=bb_xmin+res*(it+1))&(pc.record.y >= bb_ymin+res*it & pc.record.y <=bb_ymin+res*(it+1));


idxl_layer = (xyh_s(:,3) >= z_sample(j) - arg.Results.bandWidth/2) & (xyh_s(:,3) <= z_sample(j) + arg.Results.bandWidth/2); % check quels points sont dans la couche testÃ©e

[xyz_s, idxn_cell] = subsample([pc.record.x, pc.record.y, pc.record.z], ...
   'method', 'mean', ...
   'resolution', 0.5, ...
   'fig', true, ...
   'verbose', false);


%% Step 0 - Computing a raster Canopy Height Model (CHM) and normalized point cloud

##cellSize = 0.5;
##[models, refmat] = elevationModels([pc.record.x, pc.record.y, pc.record.z], ...
##    pc.record.classification, ...
##    'classTerrain', [2], ...
##    'classSurface', [3,4,5], ...
##    'cellSize', cellSize, ...
##    'interpolation', 'idw', ...
##    'searchRadius', inf, ...
##    'weightFunction', @(d) d^-3, ...
##    'smoothingFilter', fspecial('gaussian', [3, 3], 0.8), ...
##    'outputModels', {'terrain', 'surface', 'height'}, ...
##    'fig', true, ...
##    'verbose', true);
##
##% export the Digital Terrain Model (DTM) to an ARC\INFO ASCII grid file
##ASCwrite('C:\Users\cmarmy\Documents\STDL\Beeches\DFT\data\input\sampleMIE.asc', ...
##    models.terrain.values, ...
##    refmat, ...
##    'precision', 2, ...
##    'noData', -99999, ...
##    'verbose', true);
##
##% export the Digital Surface Model (DSM) to an ARC\INFO ASCII grid file
##ASCwrite('C:\Users\cmarmy\Documents\STDL\Beeches\DFT\data\input\sampleMIE_dsm.asc', ...
##    models.surface.values, ...
##    refmat, ...
##    'precision', 2, ...
##    'noData', -99999, ...
##    'verbose', true);
##
##% export the Digital Height Model (DHM) to an ARC\INFO ASCII grid file
##ASCwrite('C:\Users\cmarmy\Documents\STDL\Beeches\DFT/data\input\sampleMIE_dhm.asc', ...
##    models.height.values, ...
##    refmat, ...
##    'precision', 2, ...
##    'noData', -99999, ...
##    'verbose', true);

xyh = alt2height([pc.record.x, pc.record.y, pc.record.z], ...
   pc.record.classification, ...
   'classTerrain', 2, ...
   'method', 'linear');


